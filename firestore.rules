rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Users collection:
    // - Authenticated users can read their own profile.
    // - Authenticated users can create their own profile.
    // - Only the user or an admin can update their profile.
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow updates by the user or an admin. Admins are identified by a custom claim.
      allow update: if request.auth != null && (request.auth.uid == userId || request.auth.token.admin == true);
    }
    
    // Invitations collection:
    // - Allow creating an invitation if the user is a member of the project they are inviting someone to.
    // - Allow reading an invitation if the invitee's email matches the authenticated user's email.
    // - Invitations are deleted by a Cloud Function, not by clients.
    match /invitations/{invitationId} {
        allow create: if request.auth != null && get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.members.hasAny([request.auth.uid]);
        allow read: if request.auth != null && request.resource.data.inviteeEmail == request.auth.token.email;
        allow delete: if false; // Deletion is handled by Cloud Functions.
        allow update: if false;
    }

    // Projects collection:
    // - Allow read/write if the user is in the 'members' array of the project.
    // - Only the owner can delete a project.
    match /projects/{projectId} {
      allow read: if request.auth != null && resource.data.members.hasAny([request.auth.uid]);
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      allow update: if request.auth != null && resource.data.members.hasAny([request.auth.uid]);
      allow delete: if request.auth != null && resource.data.ownerId == request.auth.uid;

      // Tasks subcollection:
      // - Inherit project membership for read/write access.
      match /tasks/{taskId} {
        allow read, create, update, delete: if request.auth != null && get(/databases/$(database)/documents/projects/$(projectId)).data.members.hasAny([request.auth.uid]);
        
        // TimeLogs subcollection
        match /timeLogs/{timeLogId} {
            allow read, create, update, delete: if request.auth != null && get(/databases/$(database)/documents/projects/$(projectId)).data.members.hasAny([request.auth.uid]);
        }
      }
    }
    
    // Companies collection:
    // - Access is controlled by roles defined within the company document or a related roles collection (not fully defined here).
    // - For now, allow reads/writes if the user is linked to the company.
    match /companies/{companyId} {
        allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
        allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId && request.auth.token.admin == true; // Example: only admins can write
        
        // Audit logs subcollection:
        // - This collection is immutable from the client side. Only backend functions can write to it.
        match /auditLogs/{logId} {
            allow read: if request.auth != null && request.auth.token.admin == true; // Only admins can read audit logs
            allow write: if false; // Deny all client-side writes
        }
        
        // Integrations subcollection
        match /integrations/{integrationId} {
             allow read, write: if request.auth != null && request.auth.token.admin == true;
             
             // Delivery logs for webhooks
             match /deliveryLogs/{logId} {
                 allow read: if request.auth != null && request.auth.token.admin == true;
                 allow write: if false; // Only functions can write
             }
        }
        
        // Templates subcollection
        match /templates/{templateId} {
            allow read, write: if request.auth != null && request.auth.token.admin == true;
        }
        
        // Billing subcollection
        match /billing/{docId} {
             allow read: if request.auth != null && request.auth.token.admin == true;
             allow write: if false; // Written by webhooks
        }
        
        // Metrics subcollection
        match /metrics/{metricId} {
             allow read: if request.auth != null && request.auth.token.admin == true;
             allow write: if false; // Written by scheduled function
        }
    }
  }
}
