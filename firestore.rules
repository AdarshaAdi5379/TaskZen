
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Helper function to check if a user is a member of a specific project
    function isProjectMember(projectId, userId) {
        return userId in get(/databases/$(database)/documents/projects/$(projectId)).data.members;
    }

    // Users collection can be read by anyone, but only the user themselves can write to their own document.
    // Certain fields like 'role' should only be writable by an admin (handled via Cloud Functions).
    match /users/{userId} {
      allow read;
      allow write: if request.auth.uid == userId;
      // Prevent users from changing their own role or status
      allow update: if request.auth.uid == userId
                    && !('role' in request.resource.data)
                    // Add other protected fields here
                    && !('status' in request.resource.data);
    }
    
    // Invitations can be created by authenticated users. Only the invited user can process it (via Cloud Function).
    match /invitations/{invitationId} {
        allow read, write: if request.auth != null;
    }
    
    // Projects can be read by their members. Write access is more granular.
    match /projects/{projectId} {
      allow read: if isProjectMember(projectId, request.auth.uid);
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update: if isProjectMember(projectId, request.auth.uid);
    
      // Tasks subcollection
      match /tasks/{taskId} {
        allow read, write: if isProjectMember(projectId, request.auth.uid);
      
        // Time logs can be managed by project members
        match /timeLogs/{timeLogId} {
            allow read, write: if isProjectMember(projectId, request.auth.uid);
        }
      }
    }
    
    // Company-level data has stricter rules
    match /companies/{companyId} {
        // Allow read only if the user's custom claim matches the companyId
        allow read: if request.auth.token.companyId == companyId;
        
        // Templates can be read by company members, but written only by admins
        match /templates/{templateId} {
            allow read: if request.auth.token.companyId == companyId;
            allow write: if request.auth.token.companyId == companyId && isAdmin(request.auth.uid);
        }

        // Integrations, Audit Logs, Billing are server-only
        match /integrations/{integrationId} {
          allow read, write: if false; // Server-side only
           match /deliveryLogs/{logId} {
               allow read, write: if false;
           }
        }
        
        match /auditLogs/{logId} {
            allow read: if request.auth.token.companyId == companyId && isAdmin(request.auth.uid);
            allow write: if false; // Server-side only, immutable
        }
        
        match /billing/{docId} {
            allow read, write: if false; // Server-side only
        }

        match /metrics/{metricId} {
            allow read: if request.auth.token.companyId == companyId;
            allow write: if false; // Server-side only
        }
    }
  }
}
