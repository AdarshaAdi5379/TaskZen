rules_version = '2';

// Helper functions to reduce duplication
function isSignedIn() {
  return request.auth != null;
}

function isUser(userId) {
  return isSignedIn() && request.auth.uid == userId;
}

function userHasCompany(companyId) {
    return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
}

function isCompanyAdmin(companyId) {
    return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' && userHasCompany(companyId);
}

function isProjectMember(projectId) {
    return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.members;
}


service cloud.firestore {
  match /databases/{database}/documents {
  
    // Users can only read/update their own profile.
    // Roles can only be changed by an admin via Cloud Functions.
    match /users/{userId} {
      allow read, update: if isUser(userId);
      allow create: if isSignedIn();
      
      // Prevent users from changing their own role or companyId
      allow update: if request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['displayName', 'photoURL', 'subscriptionStatus', 'razorpayPlanId', 'razorpaySubscriptionId', 'razorpayPaymentId', 'razorpaySignature', 'subscriptionEndsAt', 'status']);
    }

    // Invitations can be created by any authenticated user.
    // They can only be read/updated/deleted by the system (Cloud Functions)
    match /invitations/{invitationId} {
        allow create: if isSignedIn();
        allow read, update, delete: if false; // Server-side only
    }

    // Companies can be read by their members. Write access is restricted.
    match /companies/{companyId} {
        allow get: if isCompanyAdmin(companyId);
        allow list: if false; // Don't allow listing all companies
        allow create, update, delete: if isCompanyAdmin(companyId);

        // Audit logs are immutable and can only be created by the server
        match /auditLogs/{logId} {
            allow read: if isCompanyAdmin(companyId);
            allow write: if false; // Only server can write
        }
        
        // Billing info is managed by the server
        match /billing/{docId} {
            allow read: if isCompanyAdmin(companyId);
            allow write: if false; // Only server can write
        }

        // Integrations can be managed by company admins
        match /integrations/{integrationId} {
            allow read, write, delete: if isCompanyAdmin(companyId);
            
            // Delivery logs are server-written
            match /deliveryLogs/{logId} {
                allow read: if isCompanyAdmin(companyId);
                allow write: if false;
            }
        }
        
        // Metrics are server-written
        match /metrics/{metricId} {
             allow read: if isCompanyAdmin(companyId);
             allow write: if false;
        }
        
        // Templates can be managed by company admins
        match /templates/{templateId} {
            allow read, write, delete: if isCompanyAdmin(companyId);
        }
    }

    // Projects can be managed by their members.
    match /projects/{projectId} {
      allow read, update, delete: if isProjectMember(projectId);
      allow create: if isSignedIn();

      // Tasks can be managed by project members.
      match /tasks/{taskId} {
        allow read, write, delete: if isProjectMember(projectId);
      }
      
      // Time logs can be managed by project members
      match /tasks/{taskId}/timeLogs/{logId} {
          allow read, write, delete: if isProjectMember(projectId);
      }
    }
  }
}
